@prefix ndc-lb: <https://w3id.org/network-data-catalog/library#> .
@prefix ndc-pm: <https://w3id.org/network-data-catalog/platform#> .
@prefix ndc-sr: <https://w3id.org/network-data-catalog/server#> .
@prefix mod: <https://w3id.org/mod#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix core: <https://ontology.unifiedcyberontology.org/uco/core/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix schema: <http://schema.org/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix observable: <https://ontology.unifiedcyberontology.org/uco/observable/> .
@base <http://example.org/> .

#set( $dsMap = {
  "ds:candidate": "ndc-sr:CandidateDatastore",
  "ds:intended": "ndc-sr:IntendedDatastore",
  "ds:operational": "ndc-sr:OperationalDatastore",
  "ds:running": "ndc-sr:RunningDatastore",
  "ds:startup": "ndc-sr:StartupDatastore"
} )

#set( $dsQuery = '
    declare namespace yanglib = "urn:ietf:params:xml:ns:yang:ietf-yang-library" ;
    for $ds in /yanglib:yang-library/yanglib:datastore
    return map {
        "id": $ds/yanglib:name/text() ,
        "schemaId": $ds/yanglib:schema/text()
    }')
#set($dsData = $reader.getDataframe($dsQuery))

#foreach($ds in $dsData)
#set( $dsType = $dsMap.get($ds.id) )
<NetworkDevice/srl/Datastore/$ds.id> a $dsType ;
    ndc-sr:exposedByYangServer <NetworkDevice/srl/NetconfServer> ,
                               <NetworkDevice/srl/GnmiServer> ;
    ndc-lb:supportsDatastoreSchema <NetworkDevice/srl/Schema/$ds.schemaId> ;
.
#end

#set( $schemaQuery = '
    declare namespace yanglib = "urn:ietf:params:xml:ns:yang:ietf-yang-library" ;
    for $schema in /yanglib:yang-library/yanglib:schema
    return map {
        "id": $schema/yanglib:name/text() ,
        "moduleSetId": $schema/yanglib:module-set/text()
    }')
#set($schemaData = $reader.getDataframe($schemaQuery))

#foreach($schema in $schemaData)
<NetworkDevice/srl/Schema/$schema.id> a ndc-lb:Schema ;
    ndc-lb:schemaId "$schema.id" ;
    ndc-lb:usesModuleSet <NetworkDevice/srl/ModuleSet/$schema.moduleSetId> .

#end

#set( $importedModuleQuery = '
    declare namespace yanglib = "urn:ietf:params:xml:ns:yang:ietf-yang-library" ;
    for $module in /yanglib:yang-library/yanglib:module-set/yanglib:import-only-module
    return map {
        "name": $module/yanglib:name/text() ,
        "revision": $module/yanglib:revision/text() ,
        "namespace": $module/yanglib:namespace/text() ,
        "location": $module/yanglib:location/text() ,
        "moduleSetId": $module/ancestor::yanglib:module-set/yanglib:name/text()
    }')
#set($importedModuleData = $reader.getDataframe($importedModuleQuery))
#foreach($module in $importedModuleData)
<NetworkDevice/srl/ModuleSet/$module.moduleSetId> a ndc-lb:ModuleSet ;
    ndc-lb:moduleImport <NetworkDevice/srl/ModuleSet/$module.moduleSetId/ModuleImport/$module.name/$module.revision> .

<NetworkDevice/srl/ModuleSet/$module.moduleSetId/ModuleImport/$module.name/$module.revision> a ndc-lb:ModuleImport ;
    ndc-lb:location "$module.location"^^xsd:anyURI ;
    ndc-lb:importedModule <Module/$module.name/$module.revision> .

<Module/$module.name/$module.revision> a ndc-lb:Module ;
    ndc-lb:moduleName "$module.name" ;
    ndc-lb:revisionDate "$module.revision"^^xsd:date ;
    ndc-lb:namespace "$module.namespace"^^xsd:anyURI .
#end

#set( $moduleQuery = '
    declare namespace yanglib = "urn:ietf:params:xml:ns:yang:ietf-yang-library" ;
    for $module in /yanglib:yang-library/yanglib:module-set/yanglib:module
    return map {
        "name": $module/yanglib:name/text() ,
        "revision": $module/yanglib:revision/text() ,
        "namespace": $module/yanglib:namespace/text() ,
        "location": $module/yanglib:location/text() ,
        "moduleSetId": $module/ancestor::yanglib:module-set/yanglib:name/text()
    }')
#set($moduleData = $reader.getDataframe($moduleQuery))
#foreach($module in $moduleData)
<NetworkDevice/srl/ModuleSet/$module.moduleSetId> a ndc-lb:ModuleSet ;
    ndc-lb:moduleImplementation <NetworkDevice/srl/ModuleSet/$module.moduleSetId/ModuleImplementation/$module.name/$module.revision> .

<NetworkDevice/srl/ModuleSet/$module.moduleSetId/ModuleImplementation/$module.name/$module.revision> a ndc-lb:ModuleImplementation ;
    ndc-lb:implementedModule <Module/$module.name/$module.revision> ;
    ndc-lb:location "$module.location"^^xsd:anyURI .

<Module/$module.name/$module.revision> a ndc-lb:Module ;
    ndc-lb:moduleName "$module.name" ;
    ndc-lb:revisionDate "$module.revision"^^xsd:date ;
    ndc-lb:namespace "$module.namespace"^^xsd:anyURI .
#end

#set( $implementedSubmoduleQuery = '
    declare namespace yanglib = "urn:ietf:params:xml:ns:yang:ietf-yang-library" ;
    for $implementedSubmodule in /yanglib:yang-library/yanglib:module-set/yanglib:module/yanglib:submodule
    return map {
        "name": $implementedSubmodule/yanglib:name/text() ,
        "revision": $implementedSubmodule/yanglib:revision/text() ,
        "location": $implementedSubmodule/yanglib:location/text() ,
        "moduleName": $implementedSubmodule/ancestor::yanglib:module/yanglib:name/text() ,
        "moduleRevision": $implementedSubmodule/ancestor::yanglib:module/yanglib:revision/text(),
        "moduleSetId": $implementedSubmodule/ancestor::yanglib:module-set/yanglib:name/text()
    }')
#set($implementedSubmoduleData = $reader.getDataframe($implementedSubmoduleQuery))
#foreach($implementedSubmodule in $implementedSubmoduleData)
<NetworkDevice/srl/ModuleSet/$implementedSubmodule.moduleSetId/ModuleImplementation/$implementedSubmodule.name/$implementedSubmodule.revision> a ndc-lb:ModuleImplementation ;
    ndc-lb:implementedModule <Submodule/$implementedSubmodule.name/$implementedSubmodule.revision> ;
    ndc-lb:location "$implementedSubmodule.location"^^xsd:anyURI .

<Submodule/$implementedSubmodule.name/$implementedSubmodule.revision> a ndc-lb:Submodule ;
    ndc-lb:moduleName "$implementedSubmodule.name" ;
    ndc-lb:revisionDate "$implementedSubmodule.revision"^^xsd:date .

<Module/$implementedSubmodule.moduleName/$implementedSubmodule.moduleRevision> ndc-lb:includesSubmodule <Submodule/$implementedSubmodule.name/$implementedSubmodule.revision> .
#end

#set( $importedSubmoduleQuery = '
    declare namespace yanglib = "urn:ietf:params:xml:ns:yang:ietf-yang-library" ;
    for $importedSubmodule in /yanglib:yang-library/yanglib:module-set/yanglib:module/yanglib:submodule
    return map {
        "name": $importedSubmodule/yanglib:name/text() ,
        "revision": $importedSubmodule/yanglib:revision/text() ,
        "location": $importedSubmodule/yanglib:location/text() ,
        "moduleName": $importedSubmodule/ancestor::yanglib:module/yanglib:name/text() ,
        "moduleRevision": $importedSubmodule/ancestor::yanglib:module/yanglib:revision/text(),
        "moduleSetId": $importedSubmodule/ancestor::yanglib:module-set/yanglib:name/text()
    }')
#set($importedSubmoduleData = $reader.getDataframe($importedSubmoduleQuery))
#foreach($importedSubmodule in $importedSubmoduleData)
<NetworkDevice/srl/ModuleSet/$importedSubmodule.moduleSetId/ModuleImport/$importedSubmodule.name/$importedSubmodule.revision> a ndc-lb:ModuleImport ;
    ndc-lb:importedModule <Submodule/$importedSubmodule.name/$importedSubmodule.revision> ;
    ndc-lb:location "$importedSubmodule.location"^^xsd:anyURI .

<Submodule/$importedSubmodule.name/$importedSubmodule.revision> a ndc-lb:Submodule ;
    ndc-lb:moduleName "$importedSubmodule.name" ;
    ndc-lb:revisionDate "$importedSubmodule.revision"^^xsd:date .

<Module/$importedSubmodule.moduleName/$importedSubmodule.moduleRevision> ndc-lb:includesSubmodule <Submodule/$importedSubmodule.name/$importedSubmodule.revision> .
#end

#set( $deviationQuery = '
    declare namespace yanglib = "urn:ietf:params:xml:ns:yang:ietf-yang-library" ;
    for $deviation in /yanglib:yang-library/yanglib:module-set/yanglib:module/yanglib:deviation
    return map {
        "deviationName": $deviation/text() ,
        "deviatedModuleName": $deviation/ancestor::yanglib:module/yanglib:name/text() ,
        "deviatedModuleDate": $deviation/ancestor::yanglib:module/yanglib:revision/text()
    }')
#set($deviationData = $reader.getDataframe($deviationQuery))
#foreach($deviation in $deviationData)
#foreach($module in $moduleData)
#if($module.name == $deviation.deviationName)
<Module/$deviation.deviatedModuleName/$deviation.deviatedModuleDate> ndc-lb:deviatedByModule <Module/$deviation.deviationName/$module.revision> .
#break
#end
#end
#end

#set( $featureQuery = '
    declare namespace yanglib = "urn:ietf:params:xml:ns:yang:ietf-yang-library" ;
    for $feature in /yanglib:yang-library/yanglib:module-set/yanglib:module/yanglib:feature
    return map {
        "featureName": $feature/text() ,
        "moduleName": $feature/ancestor::yanglib:module/yanglib:name/text() ,
        "moduleDate": $feature/ancestor::yanglib:module/yanglib:revision/text(),
        "moduleSetName": $feature/ancestor::yanglib:module-set/yanglib:name/text()
    }')
#set($featureData = $reader.getDataframe($featureQuery))
#foreach($feature in $featureData)
<NetworkDevice/srl/ModuleSet/$feature.moduleSetName/ModuleImplementation/$feature.moduleName/$feature.moduleDate>
    ndc-lb:usesFeature <Feature/$feature.featureName> .

<Feature/$feature.featureName> a ndc-lb:Feature ;
    ndc-lb:featureName "$feature.featureName" .
#end
